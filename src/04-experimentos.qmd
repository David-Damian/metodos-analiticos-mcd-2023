# Experimentos y controles

En esta parte veremos qué nos aporta hacer explícitas los supuestos causales
en el caso de experimentos, donde tenemos control sobre la asignación de tratamientos.

En primer lugar, como discutimos antes, al aleatorizar el tratamiento cortamos
necesariamente los caminos de puerta trasera al tratamiento que pueden producir
sesgo en nuestras estimaciones causales. Discutimos que en este caso, independiente
de la complejidad del fenómeno que nos interesa, podemos simplemente considerar
no ajustar por ninguna variable, e intentar estimar 

$$p(y|t)$$ 

para el experimento de interés. Usualmente se usan modelos lineales para respuestas
numéricas o regresión logística o de otro tipo cuando la respuestas es de distinto
tipo (modelos lineales generalizados).

A partir de nuestra estimación de esta condicional podemos resumir para obtener
el efecto causal de interés. Por ejemplo, si el tratamiento toma valores $T=0$ o $T=1$,
podemos considerar la diferencia de medias condicionales.

Consideraremos los diagramas de @Pearl2022gb que se refieren a una situación experimental.
Son los siguientes:








## Ejemplo

Queremos probar un tratamiento para reducir peso. Aleatorizaremos las personas
al tratamiento (por ejemplo una medicina), y antes de comenzar el estudio
registramos su peso inicial, género y estatura. Nuestro diagrama 
es el siguiente, donde incluímos
también el peso inicial que influye en el peso final después del tratamiento, y
otras variables no observadas que influyen tanto en peso final como peso inicial
(por ejemplo, si las personas estuvieron haciendo ejercicio o no).  También medimos
una cantidad, al final del experimento, que es bienestar general de la persona
(o una calificación de su estado de salud general):

```{r}
#| code-fold: true
grViz("
digraph {
  graph [ranksep = 0.2, rankdir=LR]
  node[shape=circle]
      U
      V
  node [shape=plaintext]
    T
  edge [minlen = 3]
   #G -> H
   #H -> PI
   T -> PF
   #G -> PF
   PI -> PF
   U -> PI
   U -> PF
   V -> PF
   PF -> B
}
")
```

No hay ninguna variable confusora, y una estrategia de estimación es comparar
$PF$ entre los grupo.

```{r}
sim_peso <- function(n){
  T <- rbinom(n, 1, 0.5)
  U <- rnorm(n, 10, 5)
  G <- rbinom(n, 1, 0.5)
  H <- rnorm(n, 170 - 10 * G, 20)
  PI <- rnorm(n, -20 +  0.5 * H + U, 10)
  PF <- rnorm(n, PI + U - 10 * T , 10)
  V <- PF - (PI + U - 10 * T)
  B <- rbinom(n, 1, 1/(1 + exp((PF-60)/10)))
  tibble(G, H, T, PI, PF, B, V)
}
set.seed(146)
peso_tbl <- sim_peso(500)
peso_tbl
```

Podemos hacer simplemente

```{r}
lm(PF ~ T, peso_tbl) |> broom::tidy()
```
y el coeficiente de $T$ sería una estimación del efecto causal promedio. Sin embargo,
si condicionamos a $PI$ tampoco creamos ninguna ruta no causal entre $T$ y $PF$. Podemos
hacer también

```{r}
lm(PF ~ T + PI, peso_tbl) |> broom::tidy()
```
Y notamos que nuestra estimación es más precisa. Esto es porque $PI$ absorbe una parte
importante de la variación de PF. Este control, no afecta la cantidad que estamos estimando,
pero si qué tan bien podemos estimarla con los datos disponibles. Nótese que
no podemos interpetar el coeficiente de $PI$ fácilmente, pues existen rutas
no casuales activas entre $PF$ y $PI$, en parte por haber condicionado a $PI$.

```{r}
lm(PF ~ T +  B, peso_tbl) |> broom::tidy()
```

Pero no debemos condicionar a $B$. La razón es que al condicionar a este
valor, activamos un colisionador en $PF$, y creamos una asociación no causal
entre $V$ (otros efectos del peso final) y el tratamiento: $T$ en la regresión
"explica" otros del peso final que no tienen qué ver con el tratamiento, 
en lugar de explicar solamente
la variación por el tratamiento.


```{r}
ggplot(peso_tbl, aes(x = factor(T), y = PF)) + geom_boxplot() +
  facet_wrap(~B)
```



Si tuviéramos $U$, y otras causas de peso final, podríamos incluirlas en la regresión
siempre y cuando no abran una ruta no causal.


## El papel del bloqueo en la experimentación


Caundo experimentamos, muchas veces existen agrupamientos naturales
de las unidades experimentales que contienen 


```{r}
#| code-fold: true
grViz("
digraph {
  graph [ranksep = 0.2, rankdir=LR]
  node[shape=circle]
      V
  node [shape=plaintext]
    T
  edge [minlen = 3]
   #G -> H
   #H -> PI
   T -> PF
   #G -> PF
   #PI -> PF
   #U -> PI
   #U -> PF
   V -> PF
   Z -> V
}
")
```






